
I18n.defaultLocale = "<%= I18n.default_locale %>";
I18n.locale = "<%= I18n.locale %>";

Backbone.Marionette.Renderer.render = function(template, data){
  if (template === false) {
    return;
  } else if (typeof(template) == 'function') {
    return template(data);
  } else if (!JST[template]) {
    throw new Error('Unknown JST template ' + template);
  }
  return JST[template](data);
};

var App = new Backbone.Marionette.Application();

<% if Rails.env == 'production' %>
  App.log = function() {};
<% else %>
  App.log = function(msg) {
    console.log(msg);
  };
<% end %>

App.version = "<%= Chessmonger::Application::VERSION %>";

App.addInitializer(function() {
  var data = $('body').data('user');
  if (data) {
    App.user = new User(data);
  }
});

App.goToPage = function(route, data, options) {

  App.router.initialPageData = data;

  if (options.keep) {
    App.keep(options.keep);
  }

  App.router.navigate(route.replace(/^\//, ''), { trigger : true });
};

App.keepList = [];
App.keep = function(model) {
  if (model) {
    App.keepList = model.allModels();
  }
  return App.keepList;
};

Backbone.Store.prototype.clear = function(models) {

  var models = _.inject(this._collections, function(memo, collection) {
    return memo.concat(collection.models);
  }, []);

  var self = this;
  _.each(models, function(model) {
    if (!_.contains(App.keepList, model)) {
      self.unregister(model);
    }
  });

  App.keepList = [];
  
  App.log('Cleared ' + models.length + ' models from backbone relational store');
};

App.vent.on('page:changing', function() {
  Backbone.Relational.store.clear();
});

$(function() {
  App.start();
  Backbone.history.start({ pushState : true });
});
